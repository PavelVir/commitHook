user www-data;
worker_processes 1;
pid /run/nginx.pid;

events {
    worker_connections 4086;
    use epoll;
    multi_accept on;
}

http {
#    sendfile on;
#    tcp_nopush on;
#    tcp_nodelay on;
#    keepalive_timeout 65;
#    keepalive_requests 1000;
#    types_hash_max_size 2048;

#    include /etc/nginx/mime.types;
    default_type application/octet-stream;

#    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
#    log_format postdata '[$time_local] $remote_addr "$request" $status "$request_body" "$resp_body"';



  log_format bodylog '$remote_addr - $remote_user [$time_local] '
  '"requeststr $request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" $request_time '
  '"requestbody = $request_body" responcebody = "$resp_body"';

#  log_format bodylog '"$request_body" "$resp_body"';



    #gzip on;
    #gzip_min_length 10240;
    #gzip_proxied expired no-cache no-store private auth;
    #gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    #gzip_disable "msie6";

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    server {


        listen 80;
        server_name 192.168.10.144;

        lua_need_request_body on;
        set $resp_body "";
        body_filter_by_lua '
          local resp_body = string.sub(ngx.arg[1], 1, 1000)
          ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
          if ngx.arg[2] then
            ngx.var.resp_body = ngx.ctx.buffered
         end
         ';


        # access_log /var/log/nginx/nginx_access.log bodylog;

         location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_pass http://192.168.250.32:8081;
            log_by_lua '
                 
               local data = ngx.var.request_body
        
               if string.find(data, "DevDepot_commitObjects") then
               
                local cURL = require("luacurl")
                local api_http = "http://192.168.10.144"
                local api_key = "123"
                local api_paste = "testapi"

                c = cURL.new()
                c:setopt(curl.OPT_URL, api_http)
                c:setopt(curl.OPT_POST, true)
                c:setopt(curl.OPT_POSTFIELDS, "api_option=paste&api_dev_key="..api_key.."&api_paste_code="..api_paste.."&api_paste_private=0&api_paste_format=php")
                c:setopt(curl.OPT_TRANSFERTEXT, true)
                c:setopt(curl.OPT_VERBOSE, true)
                c:setopt(curl.OPT_NOBODY, false)
                c:perform()
                c:close()
              end
            ';
          
        }
    }
}
